- Class: meta
  Course: Programacio en R
  Lesson: Subconjunts als vectors
  Author: Nick Carchedi, Walter Garcia-Fontes
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En aquesta lliçó, veurem com extreure elements d'un vector
    basant-nos en algunes condicions que especifiquem.

- Class: text
  Output: Per exemple, podem estar sols interessats en els primers 20 elements
    d'un vector, o sols en els elements que no són NA, o sols en els valors
    que són positius o corresponen a alguna variable d'interès. Al final
    d'aquesta lliçó sabreu com gestionar qualssevol d'aquests escenaris.

- Class: cmd_question
  Output: Us hem creat un vector anomenat x que conté un ordre aleatori de
    20 números (d'una distribució normal estàndard) i 20 NA. Entreu ara x
    per veure el seu aspecte.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Entreu x per veure els seus continguts.

- Class: text
  Output: La manera de dir-li a l'R que voleu seleccionar alguns elements
    en particular (o sigui un «subconjunt») d'un vector és posant un
    «vectors d'índexs» entre parèntesis rectes immediatament després del nom
    del vector.

- Class: cmd_question
  Output: 'Per a un exemple simple, proveu x[1:10] per veure els primers
    deu element de x.'
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: Mireu els primers deus elements de x amb x[1:10].

- Class: text
  Output: Els vectors d'índex venen en quatre sabors diferents -- vectors
    lógics, vectors d'enters positius, vectors d'enters negatius i vectors
    de cadenes caràcters -- cadascú dels quals cobrirem en aquesta lliçó.

- Class: text
  Output: Comencem indexant amb vectors lògics. Un escenari comú quan treballem
    amb dades reals és que volem extraure tots els elements d'un vector que
    no és NA (o sigui que no siguin valors absents). Recordeu que is.na(x)
    produeix un vector de valors lògics de la mateixa longitud que x, amb
    TRUE corresponent a valors NA a x i FALSE corresponent a valors no-NA a x.

- Class: mult_question
  Output: Què penseu que us donarà x[is.na(x)]?
  AnswerChoices: Un vector de tots NA; un vector sense NA; un vector de
    TRUE i FALSE; un vector de longitud 0
  CorrectAnswer: Un vector de tots NA
  AnswerTests: omnitest(correctVal="Un vector de tots NA")
  Hint: Recordeu que is.na(x) ens diu on estan el NA a un vector. Això que
    si feu un subconjunt de x basat en això, que espereu que passarà?

- Class: cmd_question
  Output: Proveu-ho entrant x[is.na(x)].
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Entreu x[is.na(x)] per veure que obteniu tots NA, que clarament no
    és el que volem!

- Class: cmd_question
  Output: Recordeu que «!» ens dóna la negació d'una expressió lógica,
    així que !is.na(x) es pot llegir com «no és NA». Conseqüentment,
    si volem crear un vector anomenat y que conté tots els valors no-NA de x,
    podem usar y <- x[!is.na(x)]. Proveu-ho.
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Entreu y <- x[!is.na(x)] per capturar tots els valors no absents de x.

- Class: cmd_question
  Output: Imprimiu y a la pantalla.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Entreu y per veure els seus continguts.

- Class: text
  Output: Ara que hem aïllat els valors no absents de x i els he posat a y,
    podem fer un subconjunt de y com volem.

- Class: mult_question
  Output: 'Recordeu que l''expressió y > 0 ens donarà un vector de valors
    lògics de la mateixa longitud que y, amb TRUE corresponent a valors de y
    que són més grans que zero i FALSE corresponen a valors de y que són més
    petits i iguals a zero. Què creieu que ens donarà y[y>0]?'
  AnswerChoices: Un vector de tots els elements positius de y; Un vector
    de tots els elements negatius de y; Un vector de tots NA; Un vector
    de longitud  0; Un vector de TRUE i FALSE
  CorrectAnswer: Un vector de tots els elements positius de y
  AnswerTests: omnitest(correctVal="Un vector de tots els elements positius de y")
  Hint: L'expressió lògica y > 0 ens donarà TRUE per a cada element de y
    que és positiu. Basat en això, què penseu que donarà y[y>0]?

- Class: cmd_question
  Output: Entreu y[y > 0] per veure que obtenim tots els elements positius
    de y, que també són els elements positius del nostre vector original x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Entreu y[y > 0] per veure sols els elements positius de y.

- Class: cmd_question
  Output: Us preguntareu perquè simplement no vam començar amb x[x > 0] per
    aïllar els elements positius de x. Proveu això ara per veure perquè.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Proveu x[x > 0] per veure perquè no hem usat aquest enfocament.

- Class: text
  Output: Atès que NA no és un valor, sinó en realitat un marcador de
    posició per a una quantitat desconeguda, l'expressió NA > 0 dóna NA.
    En conseqüència, obtenim molts NA barrejats amb els nostres nombres
    positius quan fem això.

- Class: cmd_question
  Output: Combinant el nostre coneixement d'operadors lògics amb el nostre
    coneixement de subconjunts de vectors, podríem fer això --
    x[!is.na(x) & x > 0]. Proveu-ho.
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Proveu x[!is.na(x) & x > 0] per veure què obteniu.

- Class: text
  Output: En aquest cas, requerim sols valors de x que són tant no absents
    COM TAMBÉ meś grans que zero.

- Class: text
  Output: Ja us hem mostrat com fer un subconjunt de sols els primers
    deu valors de x usant x[1:10]. En aquest cas, us estem proveint un vector
    d'enters positius dins dels parèntesis rectes, cosa que li diu a l'R que
    retorni sols els elements de x numerats de 1 a 10.

- Class: text
  Output: Molts llenguatges de programació usant el que s'anomena «indexació
    basada en zero», cosa que significa que el primer element d'un vector
    es considera l'element 0. L'R usa «indexació basat en 1», cosa que (com
    heu endevinat) vol dir que el primer element d'un vector es considera que
    és l'element 1.

- Class: cmd_question
  Output: Podeu esbrinar com faríem un subconjunt del 3er, 5è i 7è elements
    de x? Pista -- Useu la funció c() per especificar els números dels elements
    com un vector numèric.
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Creeu un vector d'índexs amb c(3, 5, 7), i poseu després això dins
    dels parèntesis rectes.

- Class: cmd_question
  Output: És important que quan s'usen vectors d'enters per fer un subconjunt
    d'un vector x, ens quedem amb els conjunt d'índexs {1, 2, ... , 40} atès
    que x sols té 40 elements. Què passa si demanem l'element 0 de x (o
    sigui x[0])? Proveu-ho.
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Entreu x[0] per veure què passa quan ens referim a l'element 0 d'un
    vector, que no està definit a l'R.

- Class: cmd_question
  Output: Com podeu esperar, no obtenim res útil. Desafortunadament, l'R
    no ens impedeix fer-lo. Què passa si demanem l'element 3000 de x?
    Proveu-ho.
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Demaneu l'element 3000 de x (que no existeix) amb x[3000].

- Class: text
  Output: Un altre cop, res d'útil, però l'R no ens impedeix demanar-ho.
    Això ens hauria de prevenir. Sempre us hauríeu d'assegurar de que el que
    demaneu està dins del rang d'elements del vector amb el qual esteu
    treballant.

- Class: text
  Output: Què passa si estem interessats en tots els elements de x EXCEPTE
    el 2on i el 10è? Seria força tediós construir un vector contenint tots
    els números 1 fins a 40 excepte 2 i 10.

- Class: cmd_question
  Output: Per sort, l'R accepta índexs enters negatius. Mentre que
    x[c(2, 10)] ens dóna SOLS el segon i el desè elements de x, x[c(-2, -10)]
    ens dóna tots els elements de x EXCEPTE el segon i el desè. Proveu ara
    x[c(-2, -10)] per veure això.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Proveu x[c(-2, -10)].

- Class: cmd_question
  Output: Una manera ràpida d'especificar múltiples nombres negatius és
    posar el signe negatiu davant el vector de números positius. Entreu
    x[-c(2, 10)] per obtenir exactament el mateix resultat.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Useu x[-c(2, 10)] per simplificar una mica les coses. Això pot estalviar
    molt de temps si s'han d'especificar mots índexs negatius.

- Class: text
  Output: Fins ara, hem presentat tres tipus de vectors d'índexs -- lògic,
    enters positius i enters negatius. L'únic tipus que ens queda requereix
    introduir el concepte d'elements «anomenats».

- Class: cmd_question
  Output: Creeu un vector numèric amb tres elements anomenats usant
    vect <- c(en = 11, tal = 2, norf = NA).
  CorrectAnswer: vect <- c(en = 11, tal = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(en = 11, tal = 2, norf = NA)')
  Hint: Creeu un vector anomenat amb vect <- c(en = 11, tal = 2, norf = NA).

- Class: cmd_question
  Output: Quan imprimim vect a la pantalla, veureu que cada element té un
    nom. Proveu-ho.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Entreu vect per veure els seus continguts.

- Class: cmd_question
  Output: També podem obtenir els noms de vect passant vect co a argument
    a la funció names(). Proveu-ho.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Comproveu el resultats de names(vect).

- Class: cmd_question
  Output: Alternativament, podem crear un vector no anomenat vect2 amb
    c(11, 2, NA). Feu això ara.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Creu un vector ordinari (no anomenat) amb el nom vect2 que contingui
    c(11, 2, NA).

- Class: cmd_question
  Output: A continuació podem afegir l'atribut «names» a vect2 amb
    names(vect2) <- c("en", "tal", "norf"). Endavant.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("en", "tal", "norf")')
  Hint: Afegiu noms a vect2 amb names(vect2) <- c("en", "tal", "norf").

- Class: cmd_question
  Output: Comprovem ara que vect i vect2 són el mateix passant-los com
    argument a la funció identical().
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: La funció identical() ens diu si els dos arguments són, això, idèntics.

- Class: text
  Output: Cert, vect i vect2 són vectors anomenats idèntics.

- Class: mult_question
  Output: Tornem ara al tema de fer un subconjunt d'un vector per elements
    anomenats. Quina de les ordres següents penseu que ens donarà el segon
    element de vect?
  AnswerChoices: vect["tal"]; vect[tal]; vect["2"]
  CorrectAnswer: vect["tal"]
  AnswerTests: omnitest(correctVal='vect["tal"]')
  Hint: Si voleu l'element amb nom «tal» (i.e. el segon element de vect), quina
    ordre ens donaria això?

- Class: cmd_question
  Output: Proveu-ho ara.
  CorrectAnswer: vect["tal"]
  AnswerTests: omnitest(correctExpr='vect["tal"]')
  Hint: Proveu vect["tal"].

- Class: cmd_question
  Output: De manera semblant, podem especificar un vector de noms amb
    vect[c("en", "tal")]. Proveu-ho.
  CorrectAnswer: vect[c("en", "tal")]
  AnswerTests: omnitest(correctExpr='vect[c("en", "tal")]')
  Hint: Useu vect[c("en", "tal")] per obtenir sols els elements de vect
    anomenats «en» i «tal».

- Class: text
  Output: Ara coneixeu els quatre mètodes d'obtenir subconjunts de vectors.
    Per a cada escenari hi ha un dels mètodes que li va millor, i quan
    tingueu dubtes, proveu-ho!

- Class: mult_question
  Output: "Voldríeu rebre crèdit per completar aquest curs a Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
